//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input Settings/Birb_Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Birb_Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Birb_Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Birb_Inputs"",
    ""maps"": [
        {
            ""name"": ""Birb"",
            ""id"": ""521ce1ff-0fe6-4e46-ba30-63c5447e023a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""d18e0f7b-a32b-488e-bb2e-907383308b5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""956aedf7-da9f-4336-90a2-448be650124e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""104ddb04-6475-4dff-a410-1b39cec555e3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c7c925e7-7d09-4cfb-8dfb-282a8b84ee10"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""448d5dfa-b7a8-42de-8a73-b06a38a86a29"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""77bd1de7-1193-4249-aec0-258ffeaccc4a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a1d53823-6549-498c-abf3-5579fe1ac051"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c5d51625-2445-41a3-9924-3d0d8c2b5faf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eda0963c-b8ad-4818-886f-8026d5cf249f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f8448c9f-27f0-4020-ac32-b5ef8ee8b171"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f063abb5-c391-4baa-a5ca-08b36d970174"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""194a919f-eac7-4b80-9c40-59d51b424ff7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1c58c33-1522-43a1-b873-d10ab89a80dd"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertY=false)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Birb
        m_Birb = asset.FindActionMap("Birb", throwIfNotFound: true);
        m_Birb_Move = m_Birb.FindAction("Move", throwIfNotFound: true);
        m_Birb_Jump = m_Birb.FindAction("Jump", throwIfNotFound: true);
        m_Birb_Look = m_Birb.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Birb
    private readonly InputActionMap m_Birb;
    private IBirbActions m_BirbActionsCallbackInterface;
    private readonly InputAction m_Birb_Move;
    private readonly InputAction m_Birb_Jump;
    private readonly InputAction m_Birb_Look;
    public struct BirbActions
    {
        private @Birb_Inputs m_Wrapper;
        public BirbActions(@Birb_Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Birb_Move;
        public InputAction @Jump => m_Wrapper.m_Birb_Jump;
        public InputAction @Look => m_Wrapper.m_Birb_Look;
        public InputActionMap Get() { return m_Wrapper.m_Birb; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BirbActions set) { return set.Get(); }
        public void SetCallbacks(IBirbActions instance)
        {
            if (m_Wrapper.m_BirbActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_BirbActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BirbActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BirbActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_BirbActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BirbActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BirbActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_BirbActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_BirbActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_BirbActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_BirbActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public BirbActions @Birb => new BirbActions(this);
    public interface IBirbActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
